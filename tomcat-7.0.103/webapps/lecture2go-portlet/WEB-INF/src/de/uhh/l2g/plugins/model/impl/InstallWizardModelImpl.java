/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.InstallWizard;
import de.uhh.l2g.plugins.model.InstallWizardModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the InstallWizard service. Represents a row in the &quot;LG_InstallWizard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.InstallWizardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InstallWizardImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see InstallWizardImpl
 * @see de.uhh.l2g.plugins.model.InstallWizard
 * @see de.uhh.l2g.plugins.model.InstallWizardModel
 * @generated
 */
public class InstallWizardModelImpl extends BaseModelImpl<InstallWizard>
	implements InstallWizardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a install wizard model instance should use the {@link de.uhh.l2g.plugins.model.InstallWizard} interface instead.
	 */
	public static final String TABLE_NAME = "LG_InstallWizard";
	public static final Object[][] TABLE_COLUMNS = {
			{ "installWizardId", Types.BIGINT },
			{ "wizartActive", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_InstallWizard (installWizardId LONG not null primary key,wizartActive INTEGER,groupId LONG,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table LG_InstallWizard";
	public static final String ORDER_BY_JPQL = " ORDER BY installWizard.installWizardId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_InstallWizard.installWizardId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.InstallWizard"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.InstallWizard"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.InstallWizard"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long INSTALLWIZARDID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.InstallWizard"));

	public InstallWizardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _installWizardId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInstallWizardId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _installWizardId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InstallWizard.class;
	}

	@Override
	public String getModelClassName() {
		return InstallWizard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("installWizardId", getInstallWizardId());
		attributes.put("wizartActive", getWizartActive());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long installWizardId = (Long)attributes.get("installWizardId");

		if (installWizardId != null) {
			setInstallWizardId(installWizardId);
		}

		Integer wizartActive = (Integer)attributes.get("wizartActive");

		if (wizartActive != null) {
			setWizartActive(wizartActive);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@Override
	public long getInstallWizardId() {
		return _installWizardId;
	}

	@Override
	public void setInstallWizardId(long installWizardId) {
		_installWizardId = installWizardId;
	}

	@Override
	public int getWizartActive() {
		return _wizartActive;
	}

	@Override
	public void setWizartActive(int wizartActive) {
		_wizartActive = wizartActive;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			InstallWizard.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InstallWizard toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InstallWizard)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InstallWizardImpl installWizardImpl = new InstallWizardImpl();

		installWizardImpl.setInstallWizardId(getInstallWizardId());
		installWizardImpl.setWizartActive(getWizartActive());
		installWizardImpl.setGroupId(getGroupId());
		installWizardImpl.setCompanyId(getCompanyId());

		installWizardImpl.resetOriginalValues();

		return installWizardImpl;
	}

	@Override
	public int compareTo(InstallWizard installWizard) {
		long primaryKey = installWizard.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InstallWizard)) {
			return false;
		}

		InstallWizard installWizard = (InstallWizard)obj;

		long primaryKey = installWizard.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InstallWizardModelImpl installWizardModelImpl = this;

		installWizardModelImpl._originalGroupId = installWizardModelImpl._groupId;

		installWizardModelImpl._setOriginalGroupId = false;

		installWizardModelImpl._originalCompanyId = installWizardModelImpl._companyId;

		installWizardModelImpl._setOriginalCompanyId = false;

		installWizardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InstallWizard> toCacheModel() {
		InstallWizardCacheModel installWizardCacheModel = new InstallWizardCacheModel();

		installWizardCacheModel.installWizardId = getInstallWizardId();

		installWizardCacheModel.wizartActive = getWizartActive();

		installWizardCacheModel.groupId = getGroupId();

		installWizardCacheModel.companyId = getCompanyId();

		return installWizardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{installWizardId=");
		sb.append(getInstallWizardId());
		sb.append(", wizartActive=");
		sb.append(getWizartActive());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.InstallWizard");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>installWizardId</column-name><column-value><![CDATA[");
		sb.append(getInstallWizardId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wizartActive</column-name><column-value><![CDATA[");
		sb.append(getWizartActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InstallWizard.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InstallWizard.class
		};
	private long _installWizardId;
	private int _wizartActive;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private InstallWizard _escapedModel;
}