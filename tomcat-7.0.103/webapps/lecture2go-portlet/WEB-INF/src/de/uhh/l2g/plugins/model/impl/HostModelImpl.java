/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.Host;
import de.uhh.l2g.plugins.model.HostModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Host service. Represents a row in the &quot;LG_Host&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.HostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HostImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see HostImpl
 * @see de.uhh.l2g.plugins.model.Host
 * @see de.uhh.l2g.plugins.model.HostModel
 * @generated
 */
public class HostModelImpl extends BaseModelImpl<Host> implements HostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a host model instance should use the {@link de.uhh.l2g.plugins.model.Host} interface instead.
	 */
	public static final String TABLE_NAME = "LG_Host";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hostId", Types.BIGINT },
			{ "directory", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "defaultHost", Types.INTEGER },
			{ "prefix", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_Host (hostId LONG not null primary key,directory VARCHAR(75) null,name STRING null,defaultHost INTEGER,prefix VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LG_Host";
	public static final String ORDER_BY_JPQL = " ORDER BY host.directory ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_Host.directory ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Host"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Host"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Host"),
			true);
	public static long DEFAULTHOST_COLUMN_BITMASK = 1L;
	public static long DIRECTORY_COLUMN_BITMASK = 2L;
	public static long HOSTID_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.Host"));

	public HostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Host.class;
	}

	@Override
	public String getModelClassName() {
		return Host.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hostId", getHostId());
		attributes.put("directory", getDirectory());
		attributes.put("name", getName());
		attributes.put("defaultHost", getDefaultHost());
		attributes.put("prefix", getPrefix());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hostId = (Long)attributes.get("hostId");

		if (hostId != null) {
			setHostId(hostId);
		}

		String directory = (String)attributes.get("directory");

		if (directory != null) {
			setDirectory(directory);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer defaultHost = (Integer)attributes.get("defaultHost");

		if (defaultHost != null) {
			setDefaultHost(defaultHost);
		}

		String prefix = (String)attributes.get("prefix");

		if (prefix != null) {
			setPrefix(prefix);
		}
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_columnBitmask |= HOSTID_COLUMN_BITMASK;

		if (!_setOriginalHostId) {
			_setOriginalHostId = true;

			_originalHostId = _hostId;
		}

		_hostId = hostId;
	}

	public long getOriginalHostId() {
		return _originalHostId;
	}

	@Override
	public String getDirectory() {
		if (_directory == null) {
			return StringPool.BLANK;
		}
		else {
			return _directory;
		}
	}

	@Override
	public void setDirectory(String directory) {
		_columnBitmask = -1L;

		if (_originalDirectory == null) {
			_originalDirectory = _directory;
		}

		_directory = directory;
	}

	public String getOriginalDirectory() {
		return GetterUtil.getString(_originalDirectory);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public int getDefaultHost() {
		return _defaultHost;
	}

	@Override
	public void setDefaultHost(int defaultHost) {
		_columnBitmask |= DEFAULTHOST_COLUMN_BITMASK;

		if (!_setOriginalDefaultHost) {
			_setOriginalDefaultHost = true;

			_originalDefaultHost = _defaultHost;
		}

		_defaultHost = defaultHost;
	}

	public int getOriginalDefaultHost() {
		return _originalDefaultHost;
	}

	@Override
	public String getPrefix() {
		if (_prefix == null) {
			return StringPool.BLANK;
		}
		else {
			return _prefix;
		}
	}

	@Override
	public void setPrefix(String prefix) {
		_prefix = prefix;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Host.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Host toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Host)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HostImpl hostImpl = new HostImpl();

		hostImpl.setHostId(getHostId());
		hostImpl.setDirectory(getDirectory());
		hostImpl.setName(getName());
		hostImpl.setDefaultHost(getDefaultHost());
		hostImpl.setPrefix(getPrefix());

		hostImpl.resetOriginalValues();

		return hostImpl;
	}

	@Override
	public int compareTo(Host host) {
		int value = 0;

		value = getDirectory().compareTo(host.getDirectory());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Host)) {
			return false;
		}

		Host host = (Host)obj;

		long primaryKey = host.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HostModelImpl hostModelImpl = this;

		hostModelImpl._originalHostId = hostModelImpl._hostId;

		hostModelImpl._setOriginalHostId = false;

		hostModelImpl._originalDirectory = hostModelImpl._directory;

		hostModelImpl._originalName = hostModelImpl._name;

		hostModelImpl._originalDefaultHost = hostModelImpl._defaultHost;

		hostModelImpl._setOriginalDefaultHost = false;

		hostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Host> toCacheModel() {
		HostCacheModel hostCacheModel = new HostCacheModel();

		hostCacheModel.hostId = getHostId();

		hostCacheModel.directory = getDirectory();

		String directory = hostCacheModel.directory;

		if ((directory != null) && (directory.length() == 0)) {
			hostCacheModel.directory = null;
		}

		hostCacheModel.name = getName();

		String name = hostCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			hostCacheModel.name = null;
		}

		hostCacheModel.defaultHost = getDefaultHost();

		hostCacheModel.prefix = getPrefix();

		String prefix = hostCacheModel.prefix;

		if ((prefix != null) && (prefix.length() == 0)) {
			hostCacheModel.prefix = null;
		}

		return hostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{hostId=");
		sb.append(getHostId());
		sb.append(", directory=");
		sb.append(getDirectory());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", defaultHost=");
		sb.append(getDefaultHost());
		sb.append(", prefix=");
		sb.append(getPrefix());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.Host");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hostId</column-name><column-value><![CDATA[");
		sb.append(getHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directory</column-name><column-value><![CDATA[");
		sb.append(getDirectory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultHost</column-name><column-value><![CDATA[");
		sb.append(getDefaultHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prefix</column-name><column-value><![CDATA[");
		sb.append(getPrefix());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Host.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Host.class };
	private long _hostId;
	private long _originalHostId;
	private boolean _setOriginalHostId;
	private String _directory;
	private String _originalDirectory;
	private String _name;
	private String _originalName;
	private int _defaultHost;
	private int _originalDefaultHost;
	private boolean _setOriginalDefaultHost;
	private String _prefix;
	private long _columnBitmask;
	private Host _escapedModel;
}