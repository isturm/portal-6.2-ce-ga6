/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.VideoStatistic;
import de.uhh.l2g.plugins.model.VideoStatisticModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VideoStatistic service. Represents a row in the &quot;LG_VideoStatistic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.VideoStatisticModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VideoStatisticImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see VideoStatisticImpl
 * @see de.uhh.l2g.plugins.model.VideoStatistic
 * @see de.uhh.l2g.plugins.model.VideoStatisticModel
 * @generated
 */
public class VideoStatisticModelImpl extends BaseModelImpl<VideoStatistic>
	implements VideoStatisticModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video statistic model instance should use the {@link de.uhh.l2g.plugins.model.VideoStatistic} interface instead.
	 */
	public static final String TABLE_NAME = "LG_VideoStatistic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "videoStatisticId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "compareDate", Types.TIMESTAMP },
			{ "totalVideos", Types.BIGINT },
			{ "publicVideos", Types.BIGINT },
			{ "privateVideos", Types.BIGINT },
			{ "currentTotal", Types.BIGINT },
			{ "currentPublic", Types.BIGINT },
			{ "currentPrivate", Types.BIGINT },
			{ "pubPercent", Types.INTEGER },
			{ "privPercent", Types.INTEGER },
			{ "currentPubPercent", Types.INTEGER },
			{ "currentPrivPercent", Types.INTEGER },
			{ "intervalName", Types.VARCHAR },
			{ "publicDiff", Types.INTEGER },
			{ "privateDiff", Types.INTEGER },
			{ "totalDiff", Types.INTEGER },
			{ "dateDiff", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_VideoStatistic (videoStatisticId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,compareDate DATE null,totalVideos LONG,publicVideos LONG,privateVideos LONG,currentTotal LONG,currentPublic LONG,currentPrivate LONG,pubPercent INTEGER,privPercent INTEGER,currentPubPercent INTEGER,currentPrivPercent INTEGER,intervalName VARCHAR(75) null,publicDiff INTEGER,privateDiff INTEGER,totalDiff INTEGER,dateDiff INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LG_VideoStatistic";
	public static final String ORDER_BY_JPQL = " ORDER BY videoStatistic.videoStatisticId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_VideoStatistic.videoStatisticId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.VideoStatistic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.VideoStatistic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.VideoStatistic"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long VIDEOSTATISTICID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.VideoStatistic"));

	public VideoStatisticModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _videoStatisticId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVideoStatisticId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _videoStatisticId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VideoStatistic.class;
	}

	@Override
	public String getModelClassName() {
		return VideoStatistic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("videoStatisticId", getVideoStatisticId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("compareDate", getCompareDate());
		attributes.put("totalVideos", getTotalVideos());
		attributes.put("publicVideos", getPublicVideos());
		attributes.put("privateVideos", getPrivateVideos());
		attributes.put("currentTotal", getCurrentTotal());
		attributes.put("currentPublic", getCurrentPublic());
		attributes.put("currentPrivate", getCurrentPrivate());
		attributes.put("pubPercent", getPubPercent());
		attributes.put("privPercent", getPrivPercent());
		attributes.put("currentPubPercent", getCurrentPubPercent());
		attributes.put("currentPrivPercent", getCurrentPrivPercent());
		attributes.put("intervalName", getIntervalName());
		attributes.put("publicDiff", getPublicDiff());
		attributes.put("privateDiff", getPrivateDiff());
		attributes.put("totalDiff", getTotalDiff());
		attributes.put("dateDiff", getDateDiff());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long videoStatisticId = (Long)attributes.get("videoStatisticId");

		if (videoStatisticId != null) {
			setVideoStatisticId(videoStatisticId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date compareDate = (Date)attributes.get("compareDate");

		if (compareDate != null) {
			setCompareDate(compareDate);
		}

		Long totalVideos = (Long)attributes.get("totalVideos");

		if (totalVideos != null) {
			setTotalVideos(totalVideos);
		}

		Long publicVideos = (Long)attributes.get("publicVideos");

		if (publicVideos != null) {
			setPublicVideos(publicVideos);
		}

		Long privateVideos = (Long)attributes.get("privateVideos");

		if (privateVideos != null) {
			setPrivateVideos(privateVideos);
		}

		Long currentTotal = (Long)attributes.get("currentTotal");

		if (currentTotal != null) {
			setCurrentTotal(currentTotal);
		}

		Long currentPublic = (Long)attributes.get("currentPublic");

		if (currentPublic != null) {
			setCurrentPublic(currentPublic);
		}

		Long currentPrivate = (Long)attributes.get("currentPrivate");

		if (currentPrivate != null) {
			setCurrentPrivate(currentPrivate);
		}

		Integer pubPercent = (Integer)attributes.get("pubPercent");

		if (pubPercent != null) {
			setPubPercent(pubPercent);
		}

		Integer privPercent = (Integer)attributes.get("privPercent");

		if (privPercent != null) {
			setPrivPercent(privPercent);
		}

		Integer currentPubPercent = (Integer)attributes.get("currentPubPercent");

		if (currentPubPercent != null) {
			setCurrentPubPercent(currentPubPercent);
		}

		Integer currentPrivPercent = (Integer)attributes.get(
				"currentPrivPercent");

		if (currentPrivPercent != null) {
			setCurrentPrivPercent(currentPrivPercent);
		}

		String intervalName = (String)attributes.get("intervalName");

		if (intervalName != null) {
			setIntervalName(intervalName);
		}

		Integer publicDiff = (Integer)attributes.get("publicDiff");

		if (publicDiff != null) {
			setPublicDiff(publicDiff);
		}

		Integer privateDiff = (Integer)attributes.get("privateDiff");

		if (privateDiff != null) {
			setPrivateDiff(privateDiff);
		}

		Integer totalDiff = (Integer)attributes.get("totalDiff");

		if (totalDiff != null) {
			setTotalDiff(totalDiff);
		}

		Integer dateDiff = (Integer)attributes.get("dateDiff");

		if (dateDiff != null) {
			setDateDiff(dateDiff);
		}
	}

	@Override
	public long getVideoStatisticId() {
		return _videoStatisticId;
	}

	@Override
	public void setVideoStatisticId(long videoStatisticId) {
		_videoStatisticId = videoStatisticId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getCompareDate() {
		return _compareDate;
	}

	@Override
	public void setCompareDate(Date compareDate) {
		_compareDate = compareDate;
	}

	@Override
	public long getTotalVideos() {
		return _totalVideos;
	}

	@Override
	public void setTotalVideos(long totalVideos) {
		_totalVideos = totalVideos;
	}

	@Override
	public long getPublicVideos() {
		return _publicVideos;
	}

	@Override
	public void setPublicVideos(long publicVideos) {
		_publicVideos = publicVideos;
	}

	@Override
	public long getPrivateVideos() {
		return _privateVideos;
	}

	@Override
	public void setPrivateVideos(long privateVideos) {
		_privateVideos = privateVideos;
	}

	@Override
	public long getCurrentTotal() {
		return _currentTotal;
	}

	@Override
	public void setCurrentTotal(long currentTotal) {
		_currentTotal = currentTotal;
	}

	@Override
	public long getCurrentPublic() {
		return _currentPublic;
	}

	@Override
	public void setCurrentPublic(long currentPublic) {
		_currentPublic = currentPublic;
	}

	@Override
	public long getCurrentPrivate() {
		return _currentPrivate;
	}

	@Override
	public void setCurrentPrivate(long currentPrivate) {
		_currentPrivate = currentPrivate;
	}

	@Override
	public int getPubPercent() {
		return _pubPercent;
	}

	@Override
	public void setPubPercent(int pubPercent) {
		_pubPercent = pubPercent;
	}

	@Override
	public int getPrivPercent() {
		return _privPercent;
	}

	@Override
	public void setPrivPercent(int privPercent) {
		_privPercent = privPercent;
	}

	@Override
	public int getCurrentPubPercent() {
		return _currentPubPercent;
	}

	@Override
	public void setCurrentPubPercent(int currentPubPercent) {
		_currentPubPercent = currentPubPercent;
	}

	@Override
	public int getCurrentPrivPercent() {
		return _currentPrivPercent;
	}

	@Override
	public void setCurrentPrivPercent(int currentPrivPercent) {
		_currentPrivPercent = currentPrivPercent;
	}

	@Override
	public String getIntervalName() {
		if (_intervalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _intervalName;
		}
	}

	@Override
	public void setIntervalName(String intervalName) {
		_intervalName = intervalName;
	}

	@Override
	public int getPublicDiff() {
		return _publicDiff;
	}

	@Override
	public void setPublicDiff(int publicDiff) {
		_publicDiff = publicDiff;
	}

	@Override
	public int getPrivateDiff() {
		return _privateDiff;
	}

	@Override
	public void setPrivateDiff(int privateDiff) {
		_privateDiff = privateDiff;
	}

	@Override
	public int getTotalDiff() {
		return _totalDiff;
	}

	@Override
	public void setTotalDiff(int totalDiff) {
		_totalDiff = totalDiff;
	}

	@Override
	public int getDateDiff() {
		return _dateDiff;
	}

	@Override
	public void setDateDiff(int dateDiff) {
		_dateDiff = dateDiff;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VideoStatistic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VideoStatistic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VideoStatistic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VideoStatisticImpl videoStatisticImpl = new VideoStatisticImpl();

		videoStatisticImpl.setVideoStatisticId(getVideoStatisticId());
		videoStatisticImpl.setGroupId(getGroupId());
		videoStatisticImpl.setCompanyId(getCompanyId());
		videoStatisticImpl.setCreateDate(getCreateDate());
		videoStatisticImpl.setModifiedDate(getModifiedDate());
		videoStatisticImpl.setCompareDate(getCompareDate());
		videoStatisticImpl.setTotalVideos(getTotalVideos());
		videoStatisticImpl.setPublicVideos(getPublicVideos());
		videoStatisticImpl.setPrivateVideos(getPrivateVideos());
		videoStatisticImpl.setCurrentTotal(getCurrentTotal());
		videoStatisticImpl.setCurrentPublic(getCurrentPublic());
		videoStatisticImpl.setCurrentPrivate(getCurrentPrivate());
		videoStatisticImpl.setPubPercent(getPubPercent());
		videoStatisticImpl.setPrivPercent(getPrivPercent());
		videoStatisticImpl.setCurrentPubPercent(getCurrentPubPercent());
		videoStatisticImpl.setCurrentPrivPercent(getCurrentPrivPercent());
		videoStatisticImpl.setIntervalName(getIntervalName());
		videoStatisticImpl.setPublicDiff(getPublicDiff());
		videoStatisticImpl.setPrivateDiff(getPrivateDiff());
		videoStatisticImpl.setTotalDiff(getTotalDiff());
		videoStatisticImpl.setDateDiff(getDateDiff());

		videoStatisticImpl.resetOriginalValues();

		return videoStatisticImpl;
	}

	@Override
	public int compareTo(VideoStatistic videoStatistic) {
		long primaryKey = videoStatistic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VideoStatistic)) {
			return false;
		}

		VideoStatistic videoStatistic = (VideoStatistic)obj;

		long primaryKey = videoStatistic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VideoStatisticModelImpl videoStatisticModelImpl = this;

		videoStatisticModelImpl._originalGroupId = videoStatisticModelImpl._groupId;

		videoStatisticModelImpl._setOriginalGroupId = false;

		videoStatisticModelImpl._originalCompanyId = videoStatisticModelImpl._companyId;

		videoStatisticModelImpl._setOriginalCompanyId = false;

		videoStatisticModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VideoStatistic> toCacheModel() {
		VideoStatisticCacheModel videoStatisticCacheModel = new VideoStatisticCacheModel();

		videoStatisticCacheModel.videoStatisticId = getVideoStatisticId();

		videoStatisticCacheModel.groupId = getGroupId();

		videoStatisticCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			videoStatisticCacheModel.createDate = createDate.getTime();
		}
		else {
			videoStatisticCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			videoStatisticCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			videoStatisticCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date compareDate = getCompareDate();

		if (compareDate != null) {
			videoStatisticCacheModel.compareDate = compareDate.getTime();
		}
		else {
			videoStatisticCacheModel.compareDate = Long.MIN_VALUE;
		}

		videoStatisticCacheModel.totalVideos = getTotalVideos();

		videoStatisticCacheModel.publicVideos = getPublicVideos();

		videoStatisticCacheModel.privateVideos = getPrivateVideos();

		videoStatisticCacheModel.currentTotal = getCurrentTotal();

		videoStatisticCacheModel.currentPublic = getCurrentPublic();

		videoStatisticCacheModel.currentPrivate = getCurrentPrivate();

		videoStatisticCacheModel.pubPercent = getPubPercent();

		videoStatisticCacheModel.privPercent = getPrivPercent();

		videoStatisticCacheModel.currentPubPercent = getCurrentPubPercent();

		videoStatisticCacheModel.currentPrivPercent = getCurrentPrivPercent();

		videoStatisticCacheModel.intervalName = getIntervalName();

		String intervalName = videoStatisticCacheModel.intervalName;

		if ((intervalName != null) && (intervalName.length() == 0)) {
			videoStatisticCacheModel.intervalName = null;
		}

		videoStatisticCacheModel.publicDiff = getPublicDiff();

		videoStatisticCacheModel.privateDiff = getPrivateDiff();

		videoStatisticCacheModel.totalDiff = getTotalDiff();

		videoStatisticCacheModel.dateDiff = getDateDiff();

		return videoStatisticCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{videoStatisticId=");
		sb.append(getVideoStatisticId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", compareDate=");
		sb.append(getCompareDate());
		sb.append(", totalVideos=");
		sb.append(getTotalVideos());
		sb.append(", publicVideos=");
		sb.append(getPublicVideos());
		sb.append(", privateVideos=");
		sb.append(getPrivateVideos());
		sb.append(", currentTotal=");
		sb.append(getCurrentTotal());
		sb.append(", currentPublic=");
		sb.append(getCurrentPublic());
		sb.append(", currentPrivate=");
		sb.append(getCurrentPrivate());
		sb.append(", pubPercent=");
		sb.append(getPubPercent());
		sb.append(", privPercent=");
		sb.append(getPrivPercent());
		sb.append(", currentPubPercent=");
		sb.append(getCurrentPubPercent());
		sb.append(", currentPrivPercent=");
		sb.append(getCurrentPrivPercent());
		sb.append(", intervalName=");
		sb.append(getIntervalName());
		sb.append(", publicDiff=");
		sb.append(getPublicDiff());
		sb.append(", privateDiff=");
		sb.append(getPrivateDiff());
		sb.append(", totalDiff=");
		sb.append(getTotalDiff());
		sb.append(", dateDiff=");
		sb.append(getDateDiff());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.VideoStatistic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>videoStatisticId</column-name><column-value><![CDATA[");
		sb.append(getVideoStatisticId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compareDate</column-name><column-value><![CDATA[");
		sb.append(getCompareDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalVideos</column-name><column-value><![CDATA[");
		sb.append(getTotalVideos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicVideos</column-name><column-value><![CDATA[");
		sb.append(getPublicVideos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>privateVideos</column-name><column-value><![CDATA[");
		sb.append(getPrivateVideos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentTotal</column-name><column-value><![CDATA[");
		sb.append(getCurrentTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPublic</column-name><column-value><![CDATA[");
		sb.append(getCurrentPublic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPrivate</column-name><column-value><![CDATA[");
		sb.append(getCurrentPrivate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pubPercent</column-name><column-value><![CDATA[");
		sb.append(getPubPercent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>privPercent</column-name><column-value><![CDATA[");
		sb.append(getPrivPercent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPubPercent</column-name><column-value><![CDATA[");
		sb.append(getCurrentPubPercent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPrivPercent</column-name><column-value><![CDATA[");
		sb.append(getCurrentPrivPercent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intervalName</column-name><column-value><![CDATA[");
		sb.append(getIntervalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicDiff</column-name><column-value><![CDATA[");
		sb.append(getPublicDiff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>privateDiff</column-name><column-value><![CDATA[");
		sb.append(getPrivateDiff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDiff</column-name><column-value><![CDATA[");
		sb.append(getTotalDiff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateDiff</column-name><column-value><![CDATA[");
		sb.append(getDateDiff());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VideoStatistic.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VideoStatistic.class
		};
	private long _videoStatisticId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _compareDate;
	private long _totalVideos;
	private long _publicVideos;
	private long _privateVideos;
	private long _currentTotal;
	private long _currentPublic;
	private long _currentPrivate;
	private int _pubPercent;
	private int _privPercent;
	private int _currentPubPercent;
	private int _currentPrivPercent;
	private String _intervalName;
	private int _publicDiff;
	private int _privateDiff;
	private int _totalDiff;
	private int _dateDiff;
	private long _columnBitmask;
	private VideoStatistic _escapedModel;
}