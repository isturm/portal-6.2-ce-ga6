/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.Autocomplete;
import de.uhh.l2g.plugins.model.AutocompleteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Autocomplete service. Represents a row in the &quot;LG_Autocomplete&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.AutocompleteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AutocompleteImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see AutocompleteImpl
 * @see de.uhh.l2g.plugins.model.Autocomplete
 * @see de.uhh.l2g.plugins.model.AutocompleteModel
 * @generated
 */
public class AutocompleteModelImpl extends BaseModelImpl<Autocomplete>
	implements AutocompleteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a autocomplete model instance should use the {@link de.uhh.l2g.plugins.model.Autocomplete} interface instead.
	 */
	public static final String TABLE_NAME = "LG_Autocomplete";
	public static final Object[][] TABLE_COLUMNS = {
			{ "autocompleteId", Types.BIGINT },
			{ "searchWordsJson", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_Autocomplete (autocompleteId LONG not null primary key,searchWordsJson TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table LG_Autocomplete";
	public static final String ORDER_BY_JPQL = " ORDER BY autocomplete.autocompleteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_Autocomplete.autocompleteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Autocomplete"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Autocomplete"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.Autocomplete"));

	public AutocompleteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _autocompleteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAutocompleteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _autocompleteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Autocomplete.class;
	}

	@Override
	public String getModelClassName() {
		return Autocomplete.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("autocompleteId", getAutocompleteId());
		attributes.put("searchWordsJson", getSearchWordsJson());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long autocompleteId = (Long)attributes.get("autocompleteId");

		if (autocompleteId != null) {
			setAutocompleteId(autocompleteId);
		}

		String searchWordsJson = (String)attributes.get("searchWordsJson");

		if (searchWordsJson != null) {
			setSearchWordsJson(searchWordsJson);
		}
	}

	@Override
	public long getAutocompleteId() {
		return _autocompleteId;
	}

	@Override
	public void setAutocompleteId(long autocompleteId) {
		_autocompleteId = autocompleteId;
	}

	@Override
	public String getSearchWordsJson() {
		if (_searchWordsJson == null) {
			return StringPool.BLANK;
		}
		else {
			return _searchWordsJson;
		}
	}

	@Override
	public void setSearchWordsJson(String searchWordsJson) {
		_searchWordsJson = searchWordsJson;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Autocomplete.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Autocomplete toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Autocomplete)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AutocompleteImpl autocompleteImpl = new AutocompleteImpl();

		autocompleteImpl.setAutocompleteId(getAutocompleteId());
		autocompleteImpl.setSearchWordsJson(getSearchWordsJson());

		autocompleteImpl.resetOriginalValues();

		return autocompleteImpl;
	}

	@Override
	public int compareTo(Autocomplete autocomplete) {
		long primaryKey = autocomplete.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Autocomplete)) {
			return false;
		}

		Autocomplete autocomplete = (Autocomplete)obj;

		long primaryKey = autocomplete.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Autocomplete> toCacheModel() {
		AutocompleteCacheModel autocompleteCacheModel = new AutocompleteCacheModel();

		autocompleteCacheModel.autocompleteId = getAutocompleteId();

		autocompleteCacheModel.searchWordsJson = getSearchWordsJson();

		String searchWordsJson = autocompleteCacheModel.searchWordsJson;

		if ((searchWordsJson != null) && (searchWordsJson.length() == 0)) {
			autocompleteCacheModel.searchWordsJson = null;
		}

		return autocompleteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{autocompleteId=");
		sb.append(getAutocompleteId());
		sb.append(", searchWordsJson=");
		sb.append(getSearchWordsJson());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.Autocomplete");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>autocompleteId</column-name><column-value><![CDATA[");
		sb.append(getAutocompleteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>searchWordsJson</column-name><column-value><![CDATA[");
		sb.append(getSearchWordsJson());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Autocomplete.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Autocomplete.class
		};
	private long _autocompleteId;
	private String _searchWordsJson;
	private Autocomplete _escapedModel;
}