/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.Producer;
import de.uhh.l2g.plugins.model.ProducerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Producer service. Represents a row in the &quot;LG_Producer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.ProducerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProducerImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see ProducerImpl
 * @see de.uhh.l2g.plugins.model.Producer
 * @see de.uhh.l2g.plugins.model.ProducerModel
 * @generated
 */
public class ProducerModelImpl extends BaseModelImpl<Producer>
	implements ProducerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a producer model instance should use the {@link de.uhh.l2g.plugins.model.Producer} interface instead.
	 */
	public static final String TABLE_NAME = "LG_Producer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "producerId", Types.BIGINT },
			{ "idNum", Types.VARCHAR },
			{ "homeDir", Types.VARCHAR },
			{ "hostId", Types.BIGINT },
			{ "institutionId", Types.BIGINT },
			{ "numberOfProductions", Types.BIGINT },
			{ "approved", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_Producer (producerId LONG not null primary key,idNum VARCHAR(75) null,homeDir VARCHAR(75) null,hostId LONG,institutionId LONG,numberOfProductions LONG,approved INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LG_Producer";
	public static final String ORDER_BY_JPQL = " ORDER BY producer.producerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_Producer.producerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Producer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Producer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Producer"),
			true);
	public static long APPROVED_COLUMN_BITMASK = 1L;
	public static long HOMEDIR_COLUMN_BITMASK = 2L;
	public static long HOSTID_COLUMN_BITMASK = 4L;
	public static long IDNUM_COLUMN_BITMASK = 8L;
	public static long INSTITUTIONID_COLUMN_BITMASK = 16L;
	public static long PRODUCERID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.Producer"));

	public ProducerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _producerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProducerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _producerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Producer.class;
	}

	@Override
	public String getModelClassName() {
		return Producer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("producerId", getProducerId());
		attributes.put("idNum", getIdNum());
		attributes.put("homeDir", getHomeDir());
		attributes.put("hostId", getHostId());
		attributes.put("institutionId", getInstitutionId());
		attributes.put("numberOfProductions", getNumberOfProductions());
		attributes.put("approved", getApproved());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long producerId = (Long)attributes.get("producerId");

		if (producerId != null) {
			setProducerId(producerId);
		}

		String idNum = (String)attributes.get("idNum");

		if (idNum != null) {
			setIdNum(idNum);
		}

		String homeDir = (String)attributes.get("homeDir");

		if (homeDir != null) {
			setHomeDir(homeDir);
		}

		Long hostId = (Long)attributes.get("hostId");

		if (hostId != null) {
			setHostId(hostId);
		}

		Long institutionId = (Long)attributes.get("institutionId");

		if (institutionId != null) {
			setInstitutionId(institutionId);
		}

		Long numberOfProductions = (Long)attributes.get("numberOfProductions");

		if (numberOfProductions != null) {
			setNumberOfProductions(numberOfProductions);
		}

		Integer approved = (Integer)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}
	}

	@Override
	public long getProducerId() {
		return _producerId;
	}

	@Override
	public void setProducerId(long producerId) {
		_producerId = producerId;
	}

	@Override
	public String getIdNum() {
		if (_idNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _idNum;
		}
	}

	@Override
	public void setIdNum(String idNum) {
		_columnBitmask |= IDNUM_COLUMN_BITMASK;

		if (_originalIdNum == null) {
			_originalIdNum = _idNum;
		}

		_idNum = idNum;
	}

	public String getOriginalIdNum() {
		return GetterUtil.getString(_originalIdNum);
	}

	@Override
	public String getHomeDir() {
		if (_homeDir == null) {
			return StringPool.BLANK;
		}
		else {
			return _homeDir;
		}
	}

	@Override
	public void setHomeDir(String homeDir) {
		_columnBitmask |= HOMEDIR_COLUMN_BITMASK;

		if (_originalHomeDir == null) {
			_originalHomeDir = _homeDir;
		}

		_homeDir = homeDir;
	}

	public String getOriginalHomeDir() {
		return GetterUtil.getString(_originalHomeDir);
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_columnBitmask |= HOSTID_COLUMN_BITMASK;

		if (!_setOriginalHostId) {
			_setOriginalHostId = true;

			_originalHostId = _hostId;
		}

		_hostId = hostId;
	}

	public long getOriginalHostId() {
		return _originalHostId;
	}

	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@Override
	public long getNumberOfProductions() {
		return _numberOfProductions;
	}

	@Override
	public void setNumberOfProductions(long numberOfProductions) {
		_numberOfProductions = numberOfProductions;
	}

	@Override
	public int getApproved() {
		return _approved;
	}

	@Override
	public void setApproved(int approved) {
		_columnBitmask |= APPROVED_COLUMN_BITMASK;

		if (!_setOriginalApproved) {
			_setOriginalApproved = true;

			_originalApproved = _approved;
		}

		_approved = approved;
	}

	public int getOriginalApproved() {
		return _originalApproved;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Producer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Producer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Producer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProducerImpl producerImpl = new ProducerImpl();

		producerImpl.setProducerId(getProducerId());
		producerImpl.setIdNum(getIdNum());
		producerImpl.setHomeDir(getHomeDir());
		producerImpl.setHostId(getHostId());
		producerImpl.setInstitutionId(getInstitutionId());
		producerImpl.setNumberOfProductions(getNumberOfProductions());
		producerImpl.setApproved(getApproved());

		producerImpl.resetOriginalValues();

		return producerImpl;
	}

	@Override
	public int compareTo(Producer producer) {
		long primaryKey = producer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Producer)) {
			return false;
		}

		Producer producer = (Producer)obj;

		long primaryKey = producer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProducerModelImpl producerModelImpl = this;

		producerModelImpl._originalIdNum = producerModelImpl._idNum;

		producerModelImpl._originalHomeDir = producerModelImpl._homeDir;

		producerModelImpl._originalHostId = producerModelImpl._hostId;

		producerModelImpl._setOriginalHostId = false;

		producerModelImpl._originalInstitutionId = producerModelImpl._institutionId;

		producerModelImpl._setOriginalInstitutionId = false;

		producerModelImpl._originalApproved = producerModelImpl._approved;

		producerModelImpl._setOriginalApproved = false;

		producerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Producer> toCacheModel() {
		ProducerCacheModel producerCacheModel = new ProducerCacheModel();

		producerCacheModel.producerId = getProducerId();

		producerCacheModel.idNum = getIdNum();

		String idNum = producerCacheModel.idNum;

		if ((idNum != null) && (idNum.length() == 0)) {
			producerCacheModel.idNum = null;
		}

		producerCacheModel.homeDir = getHomeDir();

		String homeDir = producerCacheModel.homeDir;

		if ((homeDir != null) && (homeDir.length() == 0)) {
			producerCacheModel.homeDir = null;
		}

		producerCacheModel.hostId = getHostId();

		producerCacheModel.institutionId = getInstitutionId();

		producerCacheModel.numberOfProductions = getNumberOfProductions();

		producerCacheModel.approved = getApproved();

		return producerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{producerId=");
		sb.append(getProducerId());
		sb.append(", idNum=");
		sb.append(getIdNum());
		sb.append(", homeDir=");
		sb.append(getHomeDir());
		sb.append(", hostId=");
		sb.append(getHostId());
		sb.append(", institutionId=");
		sb.append(getInstitutionId());
		sb.append(", numberOfProductions=");
		sb.append(getNumberOfProductions());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.Producer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>producerId</column-name><column-value><![CDATA[");
		sb.append(getProducerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idNum</column-name><column-value><![CDATA[");
		sb.append(getIdNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homeDir</column-name><column-value><![CDATA[");
		sb.append(getHomeDir());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostId</column-name><column-value><![CDATA[");
		sb.append(getHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>institutionId</column-name><column-value><![CDATA[");
		sb.append(getInstitutionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfProductions</column-name><column-value><![CDATA[");
		sb.append(getNumberOfProductions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Producer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Producer.class
		};
	private long _producerId;
	private String _idNum;
	private String _originalIdNum;
	private String _homeDir;
	private String _originalHomeDir;
	private long _hostId;
	private long _originalHostId;
	private boolean _setOriginalHostId;
	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private long _numberOfProductions;
	private int _approved;
	private int _originalApproved;
	private boolean _setOriginalApproved;
	private long _columnBitmask;
	private Producer _escapedModel;
}