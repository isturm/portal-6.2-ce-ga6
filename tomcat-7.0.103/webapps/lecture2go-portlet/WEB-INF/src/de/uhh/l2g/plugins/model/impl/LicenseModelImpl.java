/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.License;
import de.uhh.l2g.plugins.model.LicenseModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the License service. Represents a row in the &quot;LG_License&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.LicenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenseImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see LicenseImpl
 * @see de.uhh.l2g.plugins.model.License
 * @see de.uhh.l2g.plugins.model.LicenseModel
 * @generated
 */
public class LicenseModelImpl extends BaseModelImpl<License>
	implements LicenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a license model instance should use the {@link de.uhh.l2g.plugins.model.License} interface instead.
	 */
	public static final String TABLE_NAME = "LG_License";
	public static final Object[][] TABLE_COLUMNS = {
			{ "licenseId", Types.BIGINT },
			{ "fullName", Types.VARCHAR },
			{ "shortIdentifier", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "schemeName", Types.VARCHAR },
			{ "schemeUrl", Types.VARCHAR },
			{ "selectable", Types.BOOLEAN },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_License (licenseId LONG not null primary key,fullName VARCHAR(75) null,shortIdentifier VARCHAR(75) null,url VARCHAR(75) null,schemeName VARCHAR(75) null,schemeUrl VARCHAR(75) null,selectable BOOLEAN,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LG_License";
	public static final String ORDER_BY_JPQL = " ORDER BY license.licenseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_License.licenseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static long SELECTABLE_COLUMN_BITMASK = 1L;
	public static long LICENSEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.License"));

	public LicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return License.class;
	}

	@Override
	public String getModelClassName() {
		return License.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("licenseId", getLicenseId());
		attributes.put("fullName", getFullName());
		attributes.put("shortIdentifier", getShortIdentifier());
		attributes.put("url", getUrl());
		attributes.put("schemeName", getSchemeName());
		attributes.put("schemeUrl", getSchemeUrl());
		attributes.put("selectable", getSelectable());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long licenseId = (Long)attributes.get("licenseId");

		if (licenseId != null) {
			setLicenseId(licenseId);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String shortIdentifier = (String)attributes.get("shortIdentifier");

		if (shortIdentifier != null) {
			setShortIdentifier(shortIdentifier);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String schemeName = (String)attributes.get("schemeName");

		if (schemeName != null) {
			setSchemeName(schemeName);
		}

		String schemeUrl = (String)attributes.get("schemeUrl");

		if (schemeUrl != null) {
			setSchemeUrl(schemeUrl);
		}

		Boolean selectable = (Boolean)attributes.get("selectable");

		if (selectable != null) {
			setSelectable(selectable);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@Override
	public long getLicenseId() {
		return _licenseId;
	}

	@Override
	public void setLicenseId(long licenseId) {
		_licenseId = licenseId;
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@Override
	public String getShortIdentifier() {
		if (_shortIdentifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortIdentifier;
		}
	}

	@Override
	public void setShortIdentifier(String shortIdentifier) {
		_shortIdentifier = shortIdentifier;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public String getSchemeName() {
		if (_schemeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _schemeName;
		}
	}

	@Override
	public void setSchemeName(String schemeName) {
		_schemeName = schemeName;
	}

	@Override
	public String getSchemeUrl() {
		if (_schemeUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _schemeUrl;
		}
	}

	@Override
	public void setSchemeUrl(String schemeUrl) {
		_schemeUrl = schemeUrl;
	}

	@Override
	public boolean getSelectable() {
		return _selectable;
	}

	@Override
	public boolean isSelectable() {
		return _selectable;
	}

	@Override
	public void setSelectable(boolean selectable) {
		_columnBitmask |= SELECTABLE_COLUMN_BITMASK;

		if (!_setOriginalSelectable) {
			_setOriginalSelectable = true;

			_originalSelectable = _selectable;
		}

		_selectable = selectable;
	}

	public boolean getOriginalSelectable() {
		return _originalSelectable;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			License.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public License toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (License)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenseImpl licenseImpl = new LicenseImpl();

		licenseImpl.setLicenseId(getLicenseId());
		licenseImpl.setFullName(getFullName());
		licenseImpl.setShortIdentifier(getShortIdentifier());
		licenseImpl.setUrl(getUrl());
		licenseImpl.setSchemeName(getSchemeName());
		licenseImpl.setSchemeUrl(getSchemeUrl());
		licenseImpl.setSelectable(getSelectable());
		licenseImpl.setDescription(getDescription());

		licenseImpl.resetOriginalValues();

		return licenseImpl;
	}

	@Override
	public int compareTo(License license) {
		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof License)) {
			return false;
		}

		License license = (License)obj;

		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LicenseModelImpl licenseModelImpl = this;

		licenseModelImpl._originalSelectable = licenseModelImpl._selectable;

		licenseModelImpl._setOriginalSelectable = false;

		licenseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<License> toCacheModel() {
		LicenseCacheModel licenseCacheModel = new LicenseCacheModel();

		licenseCacheModel.licenseId = getLicenseId();

		licenseCacheModel.fullName = getFullName();

		String fullName = licenseCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			licenseCacheModel.fullName = null;
		}

		licenseCacheModel.shortIdentifier = getShortIdentifier();

		String shortIdentifier = licenseCacheModel.shortIdentifier;

		if ((shortIdentifier != null) && (shortIdentifier.length() == 0)) {
			licenseCacheModel.shortIdentifier = null;
		}

		licenseCacheModel.url = getUrl();

		String url = licenseCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			licenseCacheModel.url = null;
		}

		licenseCacheModel.schemeName = getSchemeName();

		String schemeName = licenseCacheModel.schemeName;

		if ((schemeName != null) && (schemeName.length() == 0)) {
			licenseCacheModel.schemeName = null;
		}

		licenseCacheModel.schemeUrl = getSchemeUrl();

		String schemeUrl = licenseCacheModel.schemeUrl;

		if ((schemeUrl != null) && (schemeUrl.length() == 0)) {
			licenseCacheModel.schemeUrl = null;
		}

		licenseCacheModel.selectable = getSelectable();

		licenseCacheModel.description = getDescription();

		String description = licenseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			licenseCacheModel.description = null;
		}

		return licenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{licenseId=");
		sb.append(getLicenseId());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", shortIdentifier=");
		sb.append(getShortIdentifier());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", schemeName=");
		sb.append(getSchemeName());
		sb.append(", schemeUrl=");
		sb.append(getSchemeUrl());
		sb.append(", selectable=");
		sb.append(getSelectable());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.License");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>licenseId</column-name><column-value><![CDATA[");
		sb.append(getLicenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortIdentifier</column-name><column-value><![CDATA[");
		sb.append(getShortIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schemeName</column-name><column-value><![CDATA[");
		sb.append(getSchemeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schemeUrl</column-name><column-value><![CDATA[");
		sb.append(getSchemeUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selectable</column-name><column-value><![CDATA[");
		sb.append(getSelectable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = License.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			License.class
		};
	private long _licenseId;
	private String _fullName;
	private String _shortIdentifier;
	private String _url;
	private String _schemeName;
	private String _schemeUrl;
	private boolean _selectable;
	private boolean _originalSelectable;
	private boolean _setOriginalSelectable;
	private String _description;
	private long _columnBitmask;
	private License _escapedModel;
}