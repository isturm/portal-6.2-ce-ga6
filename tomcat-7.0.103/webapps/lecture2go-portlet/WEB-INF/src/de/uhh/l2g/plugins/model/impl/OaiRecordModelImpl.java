/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.OaiRecord;
import de.uhh.l2g.plugins.model.OaiRecordModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OaiRecord service. Represents a row in the &quot;LG_OaiRecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.OaiRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OaiRecordImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see OaiRecordImpl
 * @see de.uhh.l2g.plugins.model.OaiRecord
 * @see de.uhh.l2g.plugins.model.OaiRecordModel
 * @generated
 */
public class OaiRecordModelImpl extends BaseModelImpl<OaiRecord>
	implements OaiRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a oai record model instance should use the {@link de.uhh.l2g.plugins.model.OaiRecord} interface instead.
	 */
	public static final String TABLE_NAME = "LG_OaiRecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "oaiRecordId", Types.BIGINT },
			{ "videoId", Types.BIGINT },
			{ "identifier", Types.VARCHAR },
			{ "datestamp", Types.TIMESTAMP },
			{ "deleted", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_OaiRecord (oaiRecordId LONG not null primary key,videoId LONG,identifier VARCHAR(75) null,datestamp DATE null,deleted BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table LG_OaiRecord";
	public static final String ORDER_BY_JPQL = " ORDER BY oaiRecord.datestamp DESC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_OaiRecord.datestamp DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.OaiRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.OaiRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.OaiRecord"),
			true);
	public static long IDENTIFIER_COLUMN_BITMASK = 1L;
	public static long VIDEOID_COLUMN_BITMASK = 2L;
	public static long DATESTAMP_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.OaiRecord"));

	public OaiRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oaiRecordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOaiRecordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oaiRecordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OaiRecord.class;
	}

	@Override
	public String getModelClassName() {
		return OaiRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("oaiRecordId", getOaiRecordId());
		attributes.put("videoId", getVideoId());
		attributes.put("identifier", getIdentifier());
		attributes.put("datestamp", getDatestamp());
		attributes.put("deleted", getDeleted());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long oaiRecordId = (Long)attributes.get("oaiRecordId");

		if (oaiRecordId != null) {
			setOaiRecordId(oaiRecordId);
		}

		Long videoId = (Long)attributes.get("videoId");

		if (videoId != null) {
			setVideoId(videoId);
		}

		String identifier = (String)attributes.get("identifier");

		if (identifier != null) {
			setIdentifier(identifier);
		}

		Date datestamp = (Date)attributes.get("datestamp");

		if (datestamp != null) {
			setDatestamp(datestamp);
		}

		Boolean deleted = (Boolean)attributes.get("deleted");

		if (deleted != null) {
			setDeleted(deleted);
		}
	}

	@Override
	public long getOaiRecordId() {
		return _oaiRecordId;
	}

	@Override
	public void setOaiRecordId(long oaiRecordId) {
		_oaiRecordId = oaiRecordId;
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask |= VIDEOID_COLUMN_BITMASK;

		if (!_setOriginalVideoId) {
			_setOriginalVideoId = true;

			_originalVideoId = _videoId;
		}

		_videoId = videoId;
	}

	public long getOriginalVideoId() {
		return _originalVideoId;
	}

	@Override
	public String getIdentifier() {
		if (_identifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _identifier;
		}
	}

	@Override
	public void setIdentifier(String identifier) {
		_columnBitmask |= IDENTIFIER_COLUMN_BITMASK;

		if (_originalIdentifier == null) {
			_originalIdentifier = _identifier;
		}

		_identifier = identifier;
	}

	public String getOriginalIdentifier() {
		return GetterUtil.getString(_originalIdentifier);
	}

	@Override
	public Date getDatestamp() {
		return _datestamp;
	}

	@Override
	public void setDatestamp(Date datestamp) {
		_columnBitmask = -1L;

		_datestamp = datestamp;
	}

	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		_deleted = deleted;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OaiRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OaiRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OaiRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OaiRecordImpl oaiRecordImpl = new OaiRecordImpl();

		oaiRecordImpl.setOaiRecordId(getOaiRecordId());
		oaiRecordImpl.setVideoId(getVideoId());
		oaiRecordImpl.setIdentifier(getIdentifier());
		oaiRecordImpl.setDatestamp(getDatestamp());
		oaiRecordImpl.setDeleted(getDeleted());

		oaiRecordImpl.resetOriginalValues();

		return oaiRecordImpl;
	}

	@Override
	public int compareTo(OaiRecord oaiRecord) {
		int value = 0;

		value = DateUtil.compareTo(getDatestamp(), oaiRecord.getDatestamp());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OaiRecord)) {
			return false;
		}

		OaiRecord oaiRecord = (OaiRecord)obj;

		long primaryKey = oaiRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OaiRecordModelImpl oaiRecordModelImpl = this;

		oaiRecordModelImpl._originalVideoId = oaiRecordModelImpl._videoId;

		oaiRecordModelImpl._setOriginalVideoId = false;

		oaiRecordModelImpl._originalIdentifier = oaiRecordModelImpl._identifier;

		oaiRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OaiRecord> toCacheModel() {
		OaiRecordCacheModel oaiRecordCacheModel = new OaiRecordCacheModel();

		oaiRecordCacheModel.oaiRecordId = getOaiRecordId();

		oaiRecordCacheModel.videoId = getVideoId();

		oaiRecordCacheModel.identifier = getIdentifier();

		String identifier = oaiRecordCacheModel.identifier;

		if ((identifier != null) && (identifier.length() == 0)) {
			oaiRecordCacheModel.identifier = null;
		}

		Date datestamp = getDatestamp();

		if (datestamp != null) {
			oaiRecordCacheModel.datestamp = datestamp.getTime();
		}
		else {
			oaiRecordCacheModel.datestamp = Long.MIN_VALUE;
		}

		oaiRecordCacheModel.deleted = getDeleted();

		return oaiRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{oaiRecordId=");
		sb.append(getOaiRecordId());
		sb.append(", videoId=");
		sb.append(getVideoId());
		sb.append(", identifier=");
		sb.append(getIdentifier());
		sb.append(", datestamp=");
		sb.append(getDatestamp());
		sb.append(", deleted=");
		sb.append(getDeleted());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.OaiRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>oaiRecordId</column-name><column-value><![CDATA[");
		sb.append(getOaiRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoId</column-name><column-value><![CDATA[");
		sb.append(getVideoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>identifier</column-name><column-value><![CDATA[");
		sb.append(getIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datestamp</column-name><column-value><![CDATA[");
		sb.append(getDatestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted</column-name><column-value><![CDATA[");
		sb.append(getDeleted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OaiRecord.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OaiRecord.class
		};
	private long _oaiRecordId;
	private long _videoId;
	private long _originalVideoId;
	private boolean _setOriginalVideoId;
	private String _identifier;
	private String _originalIdentifier;
	private Date _datestamp;
	private boolean _deleted;
	private long _columnBitmask;
	private OaiRecord _escapedModel;
}